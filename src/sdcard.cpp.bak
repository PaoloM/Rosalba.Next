#include "sdcard.h"
#include "obd.h"

// Global SD card manager instance
SDCardManager sdCard;

// Enhanced vehicle data logging
void logPerformanceData() {
    static unsigned long lastLogTime = 0;
    unsigned long currentTime = millis();
    
    // Log every 1 second during driving
    if (currentTime - lastLogTime >= 1000) {
        if (sdCard.initialized && vehicle.rpm > 500) { // Engine running
            sdCard.logVehicleData(vehicle);
        }
        lastLogTime = currentTime;
    }
}

// Track day specific logging
void logTrackData() {
    static unsigned long lastTrackLog = 0;
    unsigned long currentTime = millis();
    
    // High-frequency logging for track use (10Hz)
    if (currentTime - lastTrackLog >= 100) {
        if (sdCard.initialized && vehicle.sportMode) {
            sdCard.logVehicleData(vehicle);
            
            // Log additional track metrics
            if (vehicle.speed > 60) { // High speed logging
                File trackFile = SD.open("/logs/track_session.csv", FILE_APPEND);
                if (trackFile) {
                    trackFile.print(currentTime); trackFile.print(",");
                    trackFile.print(vehicle.rpm); trackFile.print(",");
                    trackFile.print(vehicle.speed); trackFile.print(",");
                    trackFile.print(vehicle.boostPressure); trackFile.print(",");
                    trackFile.print("TRACK_MODE");
                    trackFile.println();
                    trackFile.close();
                }
            }
        }
        lastTrackLog = currentTime;
    }
}

// Performance analysis functions
struct PerformanceMetrics {
    float zeroToSixty = 0;      // 0-60 mph time
    float quarterMile = 0;       // Quarter mile time
    float maxBoost = 0;          // Peak boost this session
    float avgFuelEcon = 0;       // Average fuel economy
    
    void reset() {
        zeroToSixty = 0;
        quarterMile = 0;
        maxBoost = 0;
        avgFuelEcon = 0;
    }
    
    void updateMetrics() {
        static bool timing060 = false;
        static unsigned long start060 = 0;
        static bool timingQuarter = false;
        static unsigned long startQuarter = 0;
        static float distance = 0;
        
        // 0-60 timing
        if (vehicle.speed < 5 && !timing060) {
            // Reset for new run
            timing060 = true;
            start060 = millis();
        } else if (vehicle.speed >= 60 && timing060 && zeroToSixty == 0) {
            zeroToSixty = (millis() - start060) / 1000.0;
            timing060 = false;
            
            // Log achievement
            sdCard.logDTC("PERF", "0-60 mph: " + String(zeroToSixty) + "s");
        }
        
        // Track max boost
        if (vehicle.boostPressure > maxBoost) {
            maxBoost = vehicle.boostPressure;
        }
    }
};

PerformanceMetrics perfMetrics;

// Initialize SD card functionality
void initializeSDCard() {
    if (sdCard.init()) {
        Serial.println("üî• Abarth SD Card System Ready!");
        Serial.println("Features available:");
        Serial.println("- Data logging");
        Serial.println("- Performance analysis"); 
        Serial.println("- Diagnostic history");
        Serial.println("- Configuration storage");
        
        // Start initial session
        sdCard.startDrivingSession();
        
        // Log system startup
        sdCard.logDTC("SYS", "Abarth CAN Monitor Started - " + sdCard.getCardInfo());
    } else {
        Serial.println("‚ö†Ô∏è  SD Card not available - logging disabled");
    }
}

// Update SD card operations (call from main loop)
void updateSDCard() {
    if (!sdCard.initialized) return;
    
    // Regular data logging
    logPerformanceData();
    
    // Track day enhanced logging
    if (vehicle.sportMode) {
        logTrackData();
    }
    
    // Update performance metrics
    perfMetrics.updateMetrics();
}

// Export functions for data analysis
void exportDrivingSession() {
    if (sdCard.initialized && !sdCard.currentLogFile.isEmpty()) {
        sdCard.exportSessionData(sdCard.currentLogFile);
        
        // Create performance summary
        File summary = SD.open("/exports/performance_summary.txt", FILE_WRITE);
        if (summary) {
            summary.println("=== Abarth Performance Summary ===");
            summary.println("0-60 mph: " + String(perfMetrics.zeroToSixty) + "s");
            summary.println("Max Boost: " + String(perfMetrics.maxBoost) + " PSI");
            summary.println("Peak RPM: " + String(vehicle.rpm));
            summary.println("Sport Mode Used: " + String(vehicle.sportMode ? "Yes" : "No"));
            summary.close();
        }
    }
}